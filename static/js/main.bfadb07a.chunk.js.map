{"version":3,"sources":["components/attoms/logo/TitleLogo.tsx","components/attoms/buttons/SecondaryButton.tsx","components/molecule/CompleteArea.tsx","components/molecule/IncompleteArea.tsx","components/attoms/buttons/BaseButton.tsx","components/attoms/inputs/BaseInput.tsx","components/molecule/InputArea.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleLogo","m","mb","bgGradient","bgClip","fontSize","fontWeight","SecondaryButton","props","onClick","children","w","pr","pl","bg","color","outline","CompleteArea","Todos","onClickCompleteDelete","onClickBack","p","minH","border","borderRadius","borderBottom","map","Todo","index","IncompleteArea","incompleteTodos","onClickFinish","onClickIncompleteDelete","BaseButton","BaseInput","memo","input","onChange","placeholder","value","InputArea","text","App","useState","TodoInput","setTodoInput","setIncompleteTodos","completeTodos","setCompleteTodos","e","target","newTodoMenu","newIncompleteTodo","splice","newCompleteTodos","deletedTodo","newCompleteTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfadb07a.chunk.js","sourcesContent":["import { Text } from \"@chakra-ui/layout\"\r\n\r\nexport const TitleLogo = () => {\r\n    return (\r\n        <Text\r\n          m=\"16px\"\r\n          mb=\"40px\"\r\n          bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\r\n          bgClip=\"text\"\r\n          fontSize=\"6xl\"\r\n          fontWeight=\"extrabold\">\r\n            Todo App\r\n        </Text>\r\n    )\r\n}","import { Button } from \"@chakra-ui/button\"\r\nimport { VFC } from \"react\";\r\n\r\ntype Props = {\r\n    onClick: (index: any) => void;\r\n    children: string;\r\n}\r\n\r\nexport const SecondaryButton:VFC<Props> = (props) => {\r\n    const { onClick, children } = props;\r\n    return (\r\n        <Button \r\n        m=\"8px\" \r\n        w=\"100px\" \r\n        pr=\"6px\" \r\n        pl=\"6px\" \r\n        bg=\"#FF0080\" \r\n        color=\"#fff\" \r\n        outline=\"none\"\r\n        onClick={onClick}>\r\n           {children}\r\n        </Button>\r\n    )\r\n}","import { Box, Flex, Heading } from \"@chakra-ui/layout\"\r\nimport { VFC } from \"react\";\r\nimport { SecondaryButton } from \"../attoms/buttons/SecondaryButton\"\r\n\r\ntype Props = {\r\n    Todos: string[];\r\n    onClickCompleteDelete: (index: any) => void;\r\n    onClickBack: (index: any) => void;\r\n}\r\n\r\nexport const CompleteArea: VFC<Props> = (props) => {\r\n    const { Todos, onClickCompleteDelete,  onClickBack} = props;\r\n    return(\r\n        <Box\r\n            m=\"40px\" \r\n            p=\"20px\"\r\n            w=\"1200px\"\r\n            minH=\"200px\"\r\n            border=\"1px\" \r\n            borderRadius=\"8px\"\r\n        >\r\n            <Heading fontSize=\"lg\" borderBottom=\"2px\" color=\"#FF0080\">頑張った！</Heading>\r\n            <Box fontSize=\"lg\">\r\n                <ul>\r\n                {Todos.map((Todo, index) => {\r\n                    return(\r\n                    <div key={Todo}>\r\n                        <Flex>\r\n                        <li>{Todo}</li>\r\n                        <SecondaryButton \r\n                        onClick={() => onClickBack(index)}>\r\n                            戻す\r\n                        </SecondaryButton>\r\n                        <SecondaryButton \r\n                        onClick={() => onClickCompleteDelete(index)}>\r\n                            削除\r\n                        </SecondaryButton>\r\n                        </Flex>\r\n                    </div>\r\n                    ) \r\n                })}\r\n                </ul>\r\n            </Box>\r\n        </Box> \r\n    )\r\n}","import { Box, Flex, Heading } from \"@chakra-ui/layout\"\r\nimport { VFC } from \"react\"\r\nimport { SecondaryButton } from \"../attoms/buttons/SecondaryButton\"\r\n\r\ntype Props = {\r\n    incompleteTodos: string[];\r\n    onClickFinish: (index: any) => void;\r\n    onClickIncompleteDelete: (index: any) => void;\r\n}\r\n\r\nexport const IncompleteArea:VFC<Props> = (props) => {\r\n    const { incompleteTodos, onClickFinish, onClickIncompleteDelete } = props;\r\n    return(\r\n        <Box \r\n            m=\"40px\"\r\n            p=\"20px\"\r\n            minH=\"200px\"\r\n            border=\"1px\" \r\n            borderRadius=\"8px\"\r\n            w=\"1200px\">\r\n                    <Heading fontSize=\"lg\" borderBottom=\"2px\" color=\"#FF0080\">すぐやれ！</Heading>\r\n                <Box fontSize=\"lg\">\r\n                <ul>\r\n                    {incompleteTodos.map((Todo, index) => {\r\n                    return(\r\n                        <div key={Todo}>\r\n                            <Flex>\r\n                            <li>{Todo}</li>\r\n                            <SecondaryButton\r\n                            onClick={() => onClickFinish(index)}>\r\n                                完了\r\n                            </SecondaryButton>\r\n                            <SecondaryButton\r\n                            onClick={() => onClickIncompleteDelete(index)}>\r\n                                削除\r\n                            </SecondaryButton>\r\n                            </Flex>\r\n                        </div>\r\n                    )\r\n                    })}\r\n                </ul>\r\n                </Box>\r\n        </Box>\r\n    )\r\n}","import { Button } from \"@chakra-ui/button\"\r\nimport { VFC } from \"react\";\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    children: string;\r\n}\r\n\r\nexport const BaseButton:VFC<Props> = (props) => {\r\n    const { onClick, children } = props;\r\n    return (\r\n        <Button \r\n        m=\"8px\" \r\n        w=\"100px\" \r\n        pr=\"6px\" \r\n        pl=\"6px\" \r\n        bg=\"#FF0080\" \r\n        color=\"#fff\" \r\n        outline=\"none\"\r\n        onClick={onClick}>\r\n           {children}\r\n        </Button>\r\n    )\r\n}","import { Input } from \"@chakra-ui/input\"\r\nimport { memo, VFC, ChangeEvent } from \"react\"\r\n\r\ntype Props = {\r\n    input: string;\r\n    placeholder: string;\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport const BaseInput: VFC<Props> = memo((props) => {\r\n    const { input, onChange,　placeholder } = props;\r\n    return(\r\n        <Input m=\"8px\" \r\n          placeholder={placeholder}\r\n          value={input}\r\n          onChange={onChange}></Input>\r\n    )\r\n})","import { Flex } from \"@chakra-ui/layout\"\r\nimport { ChangeEvent, memo, VFC } from \"react\"\r\nimport { BaseButton } from \"../attoms/buttons/BaseButton\"\r\nimport { BaseInput } from \"../attoms/inputs/BaseInput\"\r\n\r\ntype Props = {\r\n    input: string;\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n    onClick: () => void;\r\n    placeholder: string;\r\n    text: string\r\n}\r\n\r\nexport const InputArea: VFC<Props> = memo((props) => {\r\n    const { input, onChange, onClick, placeholder, text } = props;\r\n    return(\r\n        <Flex m=\"8px\" w=\"1200px\" >\r\n          <BaseInput \r\n            input={input} \r\n            onChange={onChange} \r\n            placeholder={placeholder}/>\r\n          <BaseButton \r\n            onClick={onClick}>\r\n              {text}\r\n          </BaseButton>\r\n        </Flex>\r\n    )\r\n})","// eslint-disable-next-line\nimport { \n  ChakraProvider, \n  Center\n  } from '@chakra-ui/react';\nimport React, { useState, ChangeEvent } from 'react';\nimport './App.css';\nimport { TitleLogo } from './components/attoms/logo/TitleLogo';\nimport { CompleteArea } from './components/molecule/CompleteArea';\nimport { IncompleteArea } from './components/molecule/IncompleteArea';\nimport { InputArea } from './components/molecule/InputArea';\n\nexport default function App() {\n  const [TodoInput, setTodoInput] = useState('');\n  const [incompleteTodos, setIncompleteTodos] = useState(['']);\n  const [completeTodos, setCompleteTodos] = useState(['']);\n\n  const onChangeTodoMenu = (e: ChangeEvent<HTMLInputElement>) => setTodoInput(e.target.value);\n  const onClickAdd = () => {\n    const newTodoMenu = [...incompleteTodos, TodoInput]\n    setIncompleteTodos(newTodoMenu);\n    setTodoInput('');\n  }\n  const onClickIncompleteDelete = (index: any) => {\n    const deletedTodo = [...incompleteTodos]\n    deletedTodo.splice(index, 1);\n    setIncompleteTodos(deletedTodo);\n  }\n  const onClickCompleteDelete = (index: any) => {\n    const deletedTodo = [...completeTodos]\n    deletedTodo.splice(index, 1);\n    setCompleteTodos(deletedTodo);\n  }\n  const onClickFinish = (index: any) => {\n    const newIncompleteTodo = [...incompleteTodos]\n    newIncompleteTodo.splice(index, 1)\n    const newCompleteTodos = [...completeTodos, incompleteTodos[index]];\n    setIncompleteTodos(newIncompleteTodo);\n    setCompleteTodos(newCompleteTodos);\n  }\n  const onClickBack = (index: any) => {\n    const newCompleteTodo = [...completeTodos];\n    newCompleteTodo.splice(index, 1);\n    const newIncompleteTodo = [...incompleteTodos, completeTodos[index]];\n    setCompleteTodos(newCompleteTodo);\n    setIncompleteTodos(newIncompleteTodo);\n  }\n\n  return (\n      <ChakraProvider>\n          <TitleLogo />\n          <Center>\n            <InputArea\n            input={TodoInput}\n            onChange={onChangeTodoMenu}\n            onClick={onClickAdd}\n            placeholder=\"\"\n            text=\"追加\"\n            />\n          </Center>\n          <Center>\n            <IncompleteArea\n            incompleteTodos={incompleteTodos}\n            onClickFinish={onClickFinish}\n            onClickIncompleteDelete={onClickIncompleteDelete} />\n          </Center>\n          <Center>\n            <CompleteArea \n            Todos={completeTodos}\n            onClickCompleteDelete={onClickCompleteDelete}\n            onClickBack={onClickBack}\n            />\n          </Center>\n      </ChakraProvider>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}